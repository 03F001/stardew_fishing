buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    generateRunFolders = true

    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }

    runs {
        configureEach {
            workingDirectory project.file('run')

            jvmArg "-XX:+AllowEnhancedClassRedefinition"

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // 'SCAN': For mods scan.
            // 'REGISTRIES': For firing of registry events.
            // 'REGISTRYDUMP': For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        client2 {
            parent runs.client

            args '--username=Dev2'
        }

        client3 {
            parent runs.client

            args '--username=Dev3'
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

def version = tasks.register('version', Copy) {
    from('src/main/java') {
        include 'com/bonker/stardewfishing/Version.java.template'
        rename '.template', ''
    }
    into layout.buildDirectory.dir("generated/sources/$name/java")
    expand project.properties
}

sourceSets {
    main {
        java { srcDir version }
        resources { srcDir 'src/generated/resources' }
    }
}

repositories {
    // local
    // - netherdepthsupgrade-3.1.5-1.20.jar
    // - quality_food-1.20.1-1.7.3-all.jar
    // - Tide-forge-1.20.1-1.5.0.jar
    flatDir { dir 'libs' }

    // aquaculture 2
    maven {
        url 'https://girafi.dk/maven'
        content {
            includeGroup 'com.teammetallurgy.aquaculture'
        }
    }

    // geckolib (dependency of nether depths)
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven'
        content {
            includeGroupByRegex('software\\.bernie\\..*')
            includeGroup('com.eliotlash.mclib')
        }
    }

    // jei
    maven {
        name = 'BlameJared'
        url = 'https://maven.blamejared.com'
        content {
            includeGroup('mezz.jei')
        }
    }

    // cloth config (dependency of tide)
    maven {
        url 'https://maven.shedaniel.me'
        content {
            includeGroup('me.shedaniel.cloth')
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // aquaculture 2
    compileOnly fg.deobf(group: 'com.teammetallurgy.aquaculture', name: "aquaculture2_${minecraft_version}", version: "${minecraft_version}-2.5.2")

    // nether depths
    compileOnly fg.deobf(group: 'blank', name: 'netherdepthsupgrade-3.1.5', version: '1.20')

    // geckolib (for nether depths)
    compileOnly fg.deobf(group: 'software.bernie.geckolib', name: "geckolib-forge-${minecraft_version}", version: '4.4.6')
    compileOnly group: 'com.eliotlash.mclib', name: 'mclib', version: '20'

    // quality food
    implementation fg.deobf(group: 'blank', name: 'quality_food-1.20.1', version: '1.7.3-all')

    // tide
    implementation fg.deobf(group: 'blank', name: 'Tide-forge-1.20.1', version: '1.5.0')

    // cloth config (for tide)
    runtimeOnly(fg.deobf(group: 'me.shedaniel.cloth', name: 'cloth-config-forge', version: '11.1.136'))

    // jei
    runtimeOnly(fg.deobf(group: 'mezz.jei', name: "jei-${minecraft_version}-forge", version: jei_version))

    // sponge mixin
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // mixinextras
    compileOnly(annotationProcessor(group: 'io.github.llamalad7', name: 'mixinextras-common', version: '0.4.0'))
    implementation(jarJar(group: 'io.github.llamalad7', name: 'mixinextras-forge', version: '0.4.0')) {
        jarJar.ranged(it, '[0.4.0,)')
    }
}

mixin {
    add sourceSets.main, 'mixins.stardew_fishing.refmap.json'
    config 'mixins.stardew_fishing.json'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
        mod_id: mod_id,
        mod_name: mod_name,
        mod_license: mod_license,
        mod_version: mod_version,
        mod_authors: mod_authors,
        mod_description: mod_description,
        minecraft_version: minecraft_version,
        minecraft_version_range: minecraft_version_range,
        forge_version: forge_version,
        forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes([
            'Specification-Title': mod_id,
            'Specification-Vendor': mod_authors,
            'Specification-Version': '1', // We are version 1 of ourselves
            'Implementation-Title': project.name,
            'Implementation-Version': project.jar.archiveVersion,
            'Implementation-Vendor': mod_authors,
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

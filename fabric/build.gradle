plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
}

base {
    group = group
    version = version
}

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)

loom {
    mixin {
        defaultRefmapName = "${mod_id}.refmap.json"
    }
    accessWidenerPath = file("src/main/resources/stardew_fishing.accesswidener")
}

def genVersion = tasks.register('genVersion', Copy) {
    from('src/main/java') {
        include 'com/bonker/stardewfishing/Version.java.template'
        rename '.template', ''
    }
    into layout.buildDirectory.dir("generated/sources/$name/java")
    expand project.properties
}

sourceSets {
    main {
        java {
            srcDir genVersion
            srcDirs += project(':common').file('src/main/java')
        }

        resources {
            srcDir 'src/generated/resources'
            srcDirs += project(':common').file('src/main/resources')
        }
    }
}

repositories {
    flatDir {
        dirs project(':common').file('libs')
    }

    exclusiveContent {
        forRepository {
            maven { url 'https://maven.fabricmc.net/' }
        }
        filter {
            includeGroup 'net.fabricmc'
            includeGroup 'net.fabricmc.fabric-api'
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                name = 'ParchmentMC'
                url = 'https://maven.parchmentmc.org'
            }
        }
        filter { includeGroupAndSubgroups('org.parchmentmc') }
    }

    exclusiveContent {
        forRepository {
            maven {
                name = 'cloth'
                url = 'https://maven.shedaniel.me/'
            }
        }
        filter { includeGroup 'me.shedaniel.cloth' }
    }
}

dependencies {
    minecraft group: 'com.mojang', name: 'minecraft', version: "${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }

    modImplementation group: 'net.fabricmc', name: 'fabric-loader', version: "${fabric_loader_version}"
    modImplementation group: 'net.fabricmc.fabric-api', name: 'fabric-api', version: "${fabric_version}"

    implementation project(':common')

    modApi("me.shedaniel.cloth:cloth-config-fabric:11.1.118") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
        minecraft_version: minecraft_version,
        minecraft_version_range: minecraft_version_range,
        fabric_version: fabric_version,
        fabric_loader_version: fabric_loader_version,
        mod_id: mod_id,
        mod_name: mod_name,
        license: license,
        version: version,
        authors: authors,
        description: project.property('description'),
        credits: credits,
    ]

    inputs.properties replaceProperties

    filesMatching('fabric.mod.json') {
        expand replaceProperties + [project: project]
    }
}

jar {
    archiveBaseName = mod_id
    archiveVersion = "${version}+mc${minecraft_version}"
    archiveClassifier = 'forge'
    manifest.attributes([
        'Specification-Title'     : mod_id,
        'Specification-Vendor'    : authors,
        'Specification-Version'   : '1',
        'Implementation-Title'    : project.name,
        'Implementation-Version'  : project.jar.archiveVersion,
        'Implementation-Vendor'   : authors,
        'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
    ])
}
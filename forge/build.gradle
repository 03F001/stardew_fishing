plugins {
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

base {
    group = group
    version = version
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

sourceSets {
    main {
        java {
            srcDirs += project(':common').layout.buildDirectory.dir('generated')
            srcDirs += project(':common').file('src/main/java')
            srcDirs += project(':api').file('src/main/java')
        }

        resources {
            srcDir 'src/generated/resources'
            srcDirs += project(':common').file('src/main/resources')
        }
    }
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }

    runs {
        configureEach {
            workingDirectory project.file('run')

            //jvmArg '-XX:+AllowEnhancedClassRedefinition'

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // 'SCAN': For mods scan.
            // 'REGISTRIES': For firing of registry events.
            // 'REGISTRYDUMP': For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source project(':api').sourceSets.main
                }
            }
        }

        client {
        }

        client2 {
            parent runs.client

            args '--username=Dev2'
        }

        client3 {
            parent runs.client

            args '--username=Dev3'
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

repositories {
    // local
    // - netherdepthsupgrade-3.1.5-1.20.jar
    // - quality_food-1.20.1-1.7.3-all.jar
    // - Tide-forge-1.20.1-1.5.0.jar
    flatDir {
        dir 'libs'
    }

    // aquaculture 2
    exclusiveContent {
        forRepository {
            maven { url 'https://girafi.dk/maven' }
        }
        filter { includeGroup 'com.teammetallurgy.aquaculture' }
    }

    // geckolib (dependency of nether depths)
    exclusiveContent {
        forRepository {
            maven {
                name 'GeckoLib'
                url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven'
            }
        }
        filter {
            includeGroup 'software.bernie.geckolib'
            includeGroup 'com.eliotlash.mclib'
        }
    }

    // cloth config (dependency of tide)
    exclusiveContent {
        forRepository {
            maven { url 'https://maven.shedaniel.me' }
        }
        filter { includeGroup 'me.shedaniel.cloth' }
    }

    // jei
    // todo: exclusiveContent not working
    maven {
        name 'BlameJared'
        url 'https://maven.blamejared.com'
        content {
            includeGroup 'mezz.jei'
        }
    }
}

dependencies {
    compileOnly project(':api')
    compileOnly project(':common')
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${minecraft_version}-${forge_version}"

    implementation group: 'org.jetbrains', name: 'annotations', version: '16.0.3'

    // sponge mixin
    implementation annotationProcessor(group: 'org.spongepowered', name: 'mixin', version: '0.8.5', classifier: 'processor')

    // quality food
    compileOnly group: 'blank', name: 'quality_food-1.20.1', version: '2.2.5', classifier: 'all'

    // tide
    compileOnly group: 'blank', name: 'Tide-forge-1.20.1', version: '1.6.2'

    // aquaculture 2
    compileOnly group: 'com.teammetallurgy.aquaculture', name: "aquaculture2_${minecraft_version}", version: "${minecraft_version}-2.5.2"

    // nether depths
    compileOnly group: 'blank', name: 'netherdepthsupgrade-3.1.5', version: '1.20'

    // geckolib (for nether depths)
    compileOnly group: 'software.bernie.geckolib', name: "geckolib-forge-${minecraft_version}", version: '4.4.6'
    compileOnly group: 'com.eliotlash.mclib', name: 'mclib', version: '20'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
        minecraft_version: minecraft_version,
        minecraft_version_range: minecraft_version_range,
        forge_version: forge_version,
        forge_version_range: forge_version_range,
        mod_id: mod_id,
        mod_name: mod_name,
        license: license,
        version: version,
        authors: authors,
        description: project.property('description'),
        credits: credits,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    archiveBaseName = mod_id
    archiveVersion = "${version}+mc${minecraft_version}"
    archiveClassifier = 'forge'

    manifest.attributes([
        'Specification-Title'     : mod_id,
        'Specification-Vendor'    : authors,
        'Specification-Version'   : '1',
        'Implementation-Title'    : project.name,
        'Implementation-Version'  : project.jar.archiveVersion,
        'Implementation-Vendor'   : authors,
        'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
    ])
}